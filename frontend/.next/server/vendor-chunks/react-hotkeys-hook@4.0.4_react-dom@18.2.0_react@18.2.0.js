"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-hotkeys-hook@4.0.4_react-dom@18.2.0_react@18.2.0";
exports.ids = ["vendor-chunks/react-hotkeys-hook@4.0.4_react-dom@18.2.0_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/react-hotkeys-hook@4.0.4_react-dom@18.2.0_react@18.2.0/node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-hotkeys-hook@4.0.4_react-dom@18.2.0_react@18.2.0/node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HotkeysProvider: () => (/* binding */ HotkeysProvider),\n/* harmony export */   isHotkeyPressed: () => (/* binding */ isHotkeyPressed),\n/* harmony export */   useHotkeys: () => (/* binding */ useHotkeys),\n/* harmony export */   useHotkeysContext: () => (/* binding */ useHotkeysContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (it) return (it = it.call(o)).next.bind(it);\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        return function() {\n            if (i >= o.length) return {\n                done: true\n            };\n            return {\n                done: false,\n                value: o[i++]\n            };\n        };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar reservedModifierKeywords = [\n    \"ctrl\",\n    \"shift\",\n    \"alt\",\n    \"meta\",\n    \"mod\"\n];\nvar mappedKeys = {\n    esc: \"escape\",\n    \"return\": \"enter\",\n    left: \"arrowleft\",\n    up: \"arrowup\",\n    right: \"arrowright\",\n    down: \"arrowdown\"\n};\nfunction parseKeysHookInput(keys, splitKey) {\n    if (splitKey === void 0) {\n        splitKey = \",\";\n    }\n    if (typeof keys === \"string\") {\n        return keys.split(splitKey);\n    }\n    return keys;\n}\nfunction parseHotkey(hotkey, combinationKey) {\n    if (combinationKey === void 0) {\n        combinationKey = \"+\";\n    }\n    var keys = hotkey.toLocaleLowerCase().split(combinationKey).map(function(k) {\n        return k.trim();\n    }).map(function(k) {\n        return mappedKeys[k] || k;\n    });\n    var modifiers = {\n        alt: keys.includes(\"alt\"),\n        ctrl: keys.includes(\"ctrl\"),\n        shift: keys.includes(\"shift\"),\n        meta: keys.includes(\"meta\"),\n        mod: keys.includes(\"mod\")\n    };\n    var singleCharKeys = keys.filter(function(k) {\n        return !reservedModifierKeywords.includes(k);\n    });\n    return _extends({}, modifiers, {\n        keys: singleCharKeys\n    });\n}\nfunction maybePreventDefault(e, hotkey, preventDefault) {\n    if (typeof preventDefault === \"function\" && preventDefault(e, hotkey) || preventDefault === true) {\n        e.preventDefault();\n    }\n}\nfunction isHotkeyEnabled(e, hotkey, enabled) {\n    if (typeof enabled === \"function\") {\n        return enabled(e, hotkey);\n    }\n    return enabled === true || enabled === undefined;\n}\nfunction isKeyboardEventTriggeredByInput(ev) {\n    return isHotkeyEnabledOnTag(ev, [\n        \"input\",\n        \"textarea\",\n        \"select\"\n    ]);\n}\nfunction isHotkeyEnabledOnTag(_ref, enabledOnTags) {\n    var target = _ref.target;\n    if (enabledOnTags === void 0) {\n        enabledOnTags = false;\n    }\n    var targetTagName = target && target.tagName;\n    if (enabledOnTags instanceof Array) {\n        return Boolean(targetTagName && enabledOnTags && enabledOnTags.some(function(tag) {\n            return tag.toLowerCase() === targetTagName.toLowerCase();\n        }));\n    }\n    return Boolean(targetTagName && enabledOnTags && enabledOnTags === true);\n}\nfunction isScopeActive(activeScopes, scopes) {\n    if (activeScopes.length === 0 && scopes) {\n        console.warn('A hotkey has the \"scopes\" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>');\n        return true;\n    }\n    if (!scopes) {\n        return true;\n    }\n    return activeScopes.some(function(scope) {\n        return scopes.includes(scope);\n    }) || activeScopes.includes(\"*\");\n}\nvar isHotkeyMatchingKeyboardEvent = function isHotkeyMatchingKeyboardEvent(e, hotkey, pressedDownKeys) {\n    var alt = hotkey.alt, ctrl = hotkey.ctrl, meta = hotkey.meta, mod = hotkey.mod, shift = hotkey.shift, keys = hotkey.keys;\n    var altKey = e.altKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, shiftKey = e.shiftKey, pressedKeyUppercase = e.key, code = e.code;\n    var keyCode = code.toLowerCase().replace(\"key\", \"\");\n    var pressedKey = pressedKeyUppercase.toLowerCase();\n    if (altKey !== alt && pressedKey !== \"alt\") {\n        return false;\n    }\n    if (shiftKey !== shift && pressedKey !== \"shift\") {\n        return false;\n    }\n    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms\n    if (mod) {\n        if (!metaKey && !ctrlKey) {\n            return false;\n        }\n    } else {\n        if (metaKey !== meta && keyCode !== \"meta\") {\n            return false;\n        }\n        if (ctrlKey !== ctrl && keyCode !== \"ctrl\") {\n            return false;\n        }\n    }\n    // All modifiers are correct, now check the key\n    // If the key is set we check for the key\n    if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {\n        return true;\n    } else if (keys) {\n        // Check if all keys are present in pressedDownKeys set\n        return keys.every(function(key) {\n            return pressedDownKeys.has(key);\n        });\n    } else if (!keys) {\n        // If the key is not set, we only listen for modifiers, that check went alright, so we return true\n        return true;\n    }\n    // There is nothing that matches.\n    return false;\n};\nvar BoundHotkeysProxyProvider = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\nvar useBoundHotkeysProxy = function useBoundHotkeysProxy() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(BoundHotkeysProxyProvider);\n};\nfunction BoundHotkeysProxyProviderProvider(_ref) {\n    var addHotkey = _ref.addHotkey, removeHotkey = _ref.removeHotkey, children = _ref.children;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BoundHotkeysProxyProvider.Provider, {\n        value: {\n            addHotkey: addHotkey,\n            removeHotkey: removeHotkey\n        },\n        children: children\n    });\n}\nvar HotkeysContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    hotkeys: [],\n    enabledScopes: [],\n    toggleScope: function toggleScope() {},\n    enableScope: function enableScope() {},\n    disableScope: function disableScope() {}\n});\nvar useHotkeysContext = function useHotkeysContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(HotkeysContext);\n};\nvar HotkeysProvider = function HotkeysProvider(_ref) {\n    var _ref$initiallyActiveS = _ref.initiallyActiveScopes, initiallyActiveScopes = _ref$initiallyActiveS === void 0 ? [\n        \"*\"\n    ] : _ref$initiallyActiveS, children = _ref.children;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((initiallyActiveScopes == null ? void 0 : initiallyActiveScopes.length) > 0 ? initiallyActiveScopes : [\n        \"*\"\n    ]), internalActiveScopes = _useState[0], setInternalActiveScopes = _useState[1];\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), boundHotkeys = _useState2[0], setBoundHotkeys = _useState2[1];\n    var isAllActive = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return internalActiveScopes.includes(\"*\");\n    }, [\n        internalActiveScopes\n    ]);\n    var enableScope = function enableScope(scope) {\n        if (isAllActive) {\n            setInternalActiveScopes([\n                scope\n            ]);\n        } else {\n            setInternalActiveScopes(Array.from(new Set([].concat(internalActiveScopes, [\n                scope\n            ]))));\n        }\n    };\n    var disableScope = function disableScope(scope) {\n        var scopes = internalActiveScopes.filter(function(s) {\n            return s !== scope;\n        });\n        if (scopes.length === 0) {\n            setInternalActiveScopes([\n                \"*\"\n            ]);\n        } else {\n            setInternalActiveScopes(scopes);\n        }\n    };\n    var toggleScope = function toggleScope(scope) {\n        if (internalActiveScopes.includes(scope)) {\n            disableScope(scope);\n        } else {\n            enableScope(scope);\n        }\n    };\n    var addBoundHotkey = function addBoundHotkey(hotkey) {\n        setBoundHotkeys([].concat(boundHotkeys, [\n            hotkey\n        ]));\n    };\n    var removeBoundHotkey = function removeBoundHotkey(hotkey) {\n        setBoundHotkeys(boundHotkeys.filter(function(h) {\n            return h.keys !== hotkey.keys;\n        }));\n    };\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(HotkeysContext.Provider, {\n        value: {\n            enabledScopes: internalActiveScopes,\n            hotkeys: boundHotkeys,\n            enableScope: enableScope,\n            disableScope: disableScope,\n            toggleScope: toggleScope\n        },\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BoundHotkeysProxyProviderProvider, {\n            addHotkey: addBoundHotkey,\n            removeHotkey: removeBoundHotkey,\n            children: children\n        })\n    });\n};\nfunction deepEqual(x, y) {\n    //@ts-ignore\n    return x && y && typeof x === \"object\" && typeof y === \"object\" ? Object.keys(x).length === Object.keys(y).length && Object.keys(x).reduce(function(isEqual, key) {\n        return isEqual && deepEqual(x[key], y[key]);\n    }, true) : x === y;\n}\nfunction useDeepEqualMemo(value) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(undefined);\n    if (!deepEqual(ref.current, value)) {\n        ref.current = value;\n    }\n    return ref.current;\n}\nvar stopPropagation = function stopPropagation(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    e.stopImmediatePropagation();\n};\nvar useSafeLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useHotkeys(keys, callback, options, dependencies) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _useRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Set()), pressedDownKeys = _useRef.current;\n    var _options = !(options instanceof Array) ? options : !(dependencies instanceof Array) ? dependencies : undefined;\n    var _deps = options instanceof Array ? options : dependencies instanceof Array ? dependencies : [];\n    var cb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(callback, [].concat(_deps));\n    var memoisedOptions = useDeepEqualMemo(_options);\n    var _useHotkeysContext = useHotkeysContext(), enabledScopes = _useHotkeysContext.enabledScopes;\n    var proxy = useBoundHotkeysProxy();\n    useSafeLayoutEffect(function() {\n        if ((memoisedOptions == null ? void 0 : memoisedOptions.enabled) === false || !isScopeActive(enabledScopes, memoisedOptions == null ? void 0 : memoisedOptions.scopes)) {\n            return;\n        }\n        var listener = function listener(e) {\n            var _e$target;\n            if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions == null ? void 0 : memoisedOptions.enableOnFormTags)) {\n                return;\n            }\n            // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE\n            // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WONT TRIGGER THE HOTKEY.\n            if (ref.current !== null && document.activeElement !== ref.current && !ref.current.contains(document.activeElement)) {\n                stopPropagation(e);\n                return;\n            }\n            if ((_e$target = e.target) != null && _e$target.isContentEditable && !(memoisedOptions != null && memoisedOptions.enableOnContentEditable)) {\n                return;\n            }\n            parseKeysHookInput(keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function(key) {\n                var _hotkey$keys;\n                var hotkey = parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey);\n                if (isHotkeyMatchingKeyboardEvent(e, hotkey, pressedDownKeys) || (_hotkey$keys = hotkey.keys) != null && _hotkey$keys.includes(\"*\")) {\n                    maybePreventDefault(e, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.preventDefault);\n                    if (!isHotkeyEnabled(e, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.enabled)) {\n                        stopPropagation(e);\n                        return;\n                    }\n                    cb(e, hotkey);\n                }\n            });\n        };\n        var handleKeyDown = function handleKeyDown(event) {\n            pressedDownKeys.add(event.key.toLowerCase());\n            if ((memoisedOptions == null ? void 0 : memoisedOptions.keydown) === undefined && (memoisedOptions == null ? void 0 : memoisedOptions.keyup) !== true || memoisedOptions != null && memoisedOptions.keydown) {\n                listener(event);\n            }\n        };\n        var handleKeyUp = function handleKeyUp(event) {\n            if (event.key.toLowerCase() !== \"meta\") {\n                pressedDownKeys[\"delete\"](event.key.toLowerCase());\n            } else {\n                // On macOS pressing down the meta key prevents triggering the keyup event for any other key https://stackoverflow.com/a/57153300/735226.\n                pressedDownKeys.clear();\n            }\n            if (memoisedOptions != null && memoisedOptions.keyup) {\n                listener(event);\n            }\n        };\n        // @ts-ignore\n        (ref.current || document).addEventListener(\"keyup\", handleKeyUp);\n        // @ts-ignore\n        (ref.current || document).addEventListener(\"keydown\", handleKeyDown);\n        if (proxy) {\n            parseKeysHookInput(keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function(key) {\n                return proxy.addHotkey(parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey));\n            });\n        }\n        return function() {\n            // @ts-ignore\n            (ref.current || document).removeEventListener(\"keyup\", handleKeyUp);\n            // @ts-ignore\n            (ref.current || document).removeEventListener(\"keydown\", handleKeyDown);\n            if (proxy) {\n                parseKeysHookInput(keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function(key) {\n                    return proxy.removeHotkey(parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey));\n                });\n            }\n        };\n    }, [\n        keys,\n        cb,\n        memoisedOptions,\n        enabledScopes\n    ]);\n    return ref;\n}\nvar currentlyPressedKeys = /*#__PURE__*/ new Set();\nfunction isHotkeyPressed(key, splitKey) {\n    if (splitKey === void 0) {\n        splitKey = \",\";\n    }\n    var hotkeyArray = Array.isArray(key) ? key : key.split(splitKey);\n    return hotkeyArray.every(function(hotkey) {\n        var parsedHotkey = parseHotkey(hotkey);\n        for(var _iterator = _createForOfIteratorHelperLoose(currentlyPressedKeys), _step; !(_step = _iterator()).done;){\n            var pressedHotkey = _step.value;\n            if (deepEqual(parsedHotkey, pressedHotkey)) {\n                return true;\n            }\n        }\n    });\n}\nfunction pushToCurrentlyPressedKeys(key) {\n    var hotkeyArray = Array.isArray(key) ? key : [\n        key\n    ];\n    hotkeyArray.forEach(function(hotkey) {\n        return currentlyPressedKeys.add(parseHotkey(hotkey));\n    });\n}\nfunction removeFromCurrentlyPressedKeys(key) {\n    var hotkeyArray = Array.isArray(key) ? key : [\n        key\n    ];\n    hotkeyArray.forEach(function(hotkey) {\n        var parsedHotkey = parseHotkey(hotkey);\n        for(var _iterator2 = _createForOfIteratorHelperLoose(currentlyPressedKeys), _step2; !(_step2 = _iterator2()).done;){\n            var _pressedHotkey$keys;\n            var pressedHotkey = _step2.value;\n            if ((_pressedHotkey$keys = pressedHotkey.keys) != null && _pressedHotkey$keys.every(function(key) {\n                var _parsedHotkey$keys;\n                return (_parsedHotkey$keys = parsedHotkey.keys) == null ? void 0 : _parsedHotkey$keys.includes(key);\n            })) {\n                currentlyPressedKeys[\"delete\"](pressedHotkey);\n            }\n        }\n    });\n}\n(function() {\n    if (false) {}\n})();\n //# sourceMappingURL=react-hotkeys-hook.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/react-hotkeys-hook@4.0.4_react-dom@18.2.0_react@18.2.0/node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js\n");

/***/ })

};
;